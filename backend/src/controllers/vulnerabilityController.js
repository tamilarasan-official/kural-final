const Vulnerability = require('../models/vulnerability');
const PartColor = require('../models/partColor');
const { asyncHandler } = require('../utils/asyncHandler');

// @desc    Get all vulnerabilities
// @route   GET /api/v1/vulnerabilities
// @access  Private
const getVulnerabilities = asyncHandler(async (req, res) => {
  const vulnerabilities = await Vulnerability.find({ isActive: true }).sort({ name: 1 });
  
  res.json({
    success: true,
    vulnerabilities
  });
});

// @desc    Get vulnerability by ID
// @route   GET /api/v1/vulnerabilities/:id
// @access  Private
const getVulnerabilityById = asyncHandler(async (req, res) => {
  const vulnerability = await Vulnerability.findById(req.params.id);
  
  if (!vulnerability) {
    return res.status(404).json({
      success: false,
      error: 'Vulnerability not found'
    });
  }
  
  res.json({
    success: true,
    vulnerability
  });
});

// @desc    Create new vulnerability
// @route   POST /api/v1/vulnerabilities
// @access  Private
const createVulnerability = asyncHandler(async (req, res) => {
  const { name, color, description } = req.body;
  
  const vulnerability = await Vulnerability.create({
    name,
    color,
    description
  });
  
  res.status(201).json({
    success: true,
    vulnerability
  });
});

// @desc    Update vulnerability
// @route   PUT /api/v1/vulnerabilities/:id
// @access  Private
const updateVulnerability = asyncHandler(async (req, res) => {
  const vulnerability = await Vulnerability.findByIdAndUpdate(
    req.params.id,
    req.body,
    { new: true, runValidators: true }
  );
  
  if (!vulnerability) {
    return res.status(404).json({
      success: false,
      error: 'Vulnerability not found'
    });
  }
  
  res.json({
    success: true,
    vulnerability
  });
});

// @desc    Delete vulnerability
// @route   DELETE /api/v1/vulnerabilities/:id
// @access  Private
const deleteVulnerability = asyncHandler(async (req, res) => {
  const vulnerability = await Vulnerability.findByIdAndUpdate(
    req.params.id,
    { isActive: false },
    { new: true }
  );
  
  if (!vulnerability) {
    return res.status(404).json({
      success: false,
      error: 'Vulnerability not found'
    });
  }
  
  res.json({
    success: true,
    message: 'Vulnerability deactivated successfully'
  });
});

module.exports = {
  getVulnerabilities,
  getVulnerabilityById,
  createVulnerability,
  updateVulnerability,
  deleteVulnerability
};
